snippet class "Class declaration template" b
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

class `!p snip.rv=snip.basename`
{
}
endsnippet

snippet trait "Trait declaration template" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

trait ${1:`!p snip.rv=snip.basename`}
{
}
endsnippet

snippet interface "Interface declaration template" b
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

interface `!p snip.rv=snip.basename`
{
	public function ${2:someFunction}(${3:$param}): ${4:};$5
}
endsnippet

snippet testcase6 "class XYZTest extends TestCase { ... }"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

use PHPUnit\Framework\TestCase;

class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
` extends TestCase
{
	public function test$1()
	{
		${0:${VISUAL}}
	}
}
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:$param}): ${3:}
{
	${4:}
}
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:$param}): ${3:}
{
	${VISUAL}${4:}
}
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:$param}): ${3:}
{
	${VISUAL}${4:}
}
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:$param}): ${3:}
{
	${VISUAL}${4:}
}
endsnippet

snippet pros "Protected static function" b

protected static function ${1:name}(${2:$param}): ${3:}
{
	${VISUAL}${4:}
}
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:$param}): ${3:}
{
	${VISUAL}${4:}
}
endsnippet

snippet tok "Symfony Token parameter"
TokenInterface $token = null
endsnippet

snippet dump "dump()"
dump(${1:arg});die;
endsnippet
